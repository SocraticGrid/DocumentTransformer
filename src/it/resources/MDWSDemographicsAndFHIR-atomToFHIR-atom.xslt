<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://mdws.medora.va.gov/EmrSvc" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ns1="http://www.w3.org/2005/Atom" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 vmf xs ns1 fn">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='H'">
				<xsl:value-of select="'home'"/>
			</xsl:when>
			<xsl:when test="$input='WP'">
				<xsl:value-of select="'work'"/>
			</xsl:when>
			<xsl:when test="$input='M'">
				<xsl:value-of select="'mobile'"/>
			</xsl:when>
			<xsl:when test="$input='T'">
				<xsl:value-of select="'temp'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'home'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:param name="fhir-atom3" select="'source.xml'"/>
	<xsl:template match="/">
		<xsl:variable name="var1_resultof_cast" as="xs:string" select="xs:string(xs:anyURI('MDWS/GetNhinData/Vitals'))"/>
		<feed xmlns="http://www.w3.org/2005/Atom" xmlns:fhir="http://hl7.org/fhir" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://www.w3.org/2005/Atom C:/Users/JERRYG~1/Dropbox/Cognitive/MAPFOR~1/fhir-all-xsd_09/fhir-atom.xsd'"/>
			<title>MDWS/GetNhinData/Vitals</title>
			<id>
				<xsl:sequence select="$var1_resultof_cast"/>
			</id>
			<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results">
				<xsl:variable name="var2_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
				<xsl:variable name="var3_resultof_cast" as="xs:double" select="xs:double(xs:decimal('4'))"/>
				<xsl:variable name="var4_resultof_cast" as="xs:double" select="xs:double(xs:decimal('6'))"/>
				<xsl:variable name="var5_resultof_first" as="node()" select="ns0:demographics/ns0:patient"/>
				<xsl:variable name="var6_address" as="node()?" select="$var5_resultof_first/ns0:address"/>
				<xsl:variable name="var7_resultof_cast" as="xs:string" select="fn:string($var5_resultof_first/ns0:gender/@value)"/>
				<xsl:variable name="var8_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string($var5_resultof_first/ns0:ssn/@value)))"/>
				<xsl:variable name="var9_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string($var5_resultof_first/ns0:dob/@value)))"/>
				<xsl:variable name="var10_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string($var5_resultof_first/ns0:id/@value)))"/>
				<entry>
					<title>MDWS/GetNhinData/Vitals</title>
					<id>
						<xsl:sequence select="$var1_resultof_cast"/>
					</id>
					<content>
						<fhir:Patient>
							<xsl:attribute name="id" namespace="" select="$var10_resultof_cast"/>
							<fhir:identifier>
								<fhir:label>
									<xsl:attribute name="value" namespace="" select="$var10_resultof_cast"/>
								</fhir:label>
								<fhir:system>
									<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('dfn'))"/>
								</fhir:system>
								<fhir:key>
									<xsl:attribute name="value" namespace="" select="$var10_resultof_cast"/>
								</fhir:key>
							</fhir:identifier>
							<fhir:details>
								<fhir:identifier>
									<fhir:label>
										<xsl:attribute name="value" namespace="" select="fn:concat('XXX-XX-', fn:substring($var8_resultof_cast, $var4_resultof_cast, $var3_resultof_cast))"/>
									</fhir:label>
									<fhir:system>
										<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('ssn'))"/>
									</fhir:system>
									<fhir:key>
										<xsl:attribute name="value" namespace="" select="$var8_resultof_cast"/>
									</fhir:key>
								</fhir:identifier>
								<xsl:for-each select="$var5_resultof_first/ns0:icn">
									<xsl:variable name="var11_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string(@value)))"/>
									<fhir:identifier>
										<fhir:label>
											<xsl:attribute name="value" namespace="" select="$var11_resultof_cast"/>
										</fhir:label>
										<fhir:system>
											<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('national.dfn'))"/>
										</fhir:system>
										<fhir:key>
											<xsl:attribute name="value" namespace="" select="$var11_resultof_cast"/>
										</fhir:key>
									</fhir:identifier>
								</xsl:for-each>
								<fhir:name>
									<fhir:text>
										<xsl:attribute name="value" namespace="" select="fn:string($var5_resultof_first/ns0:fullName/@value)"/>
									</fhir:text>
									<fhir:family>
										<xsl:attribute name="value" namespace="" select="fn:string($var5_resultof_first/ns0:familyName/@value)"/>
									</fhir:family>
									<fhir:given>
										<xsl:attribute name="value" namespace="" select="fn:string($var5_resultof_first/ns0:givenNames/@value)"/>
									</fhir:given>
								</fhir:name>
								<xsl:for-each select="$var5_resultof_first/ns0:telecomList/ns0:telecom">
									<fhir:telecom>
										<fhir:value>
											<xsl:attribute name="value" namespace="" select="fn:string(@value)"/>
										</fhir:value>
										<fhir:use>
											<xsl:attribute name="value" namespace="">
												<xsl:call-template name="vmf:vmf1_inputtoresult">
													<xsl:with-param name="input" select="fn:string(@usageType)" as="xs:string"/>
												</xsl:call-template>
											</xsl:attribute>
										</fhir:use>
									</fhir:telecom>
								</xsl:for-each>
								<fhir:gender>
									<fhir:system>
										<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('2.16.840.1.113883.1.11.1'))"/>
									</fhir:system>
									<fhir:code>
										<xsl:attribute name="value" namespace="" select="$var7_resultof_cast"/>
									</fhir:code>
									<fhir:display>
										<xsl:attribute name="value" namespace="" select="$var7_resultof_cast"/>
									</fhir:display>
								</fhir:gender>
								<fhir:birthDate>
									<xsl:attribute name="value" namespace="" select="fn:concat(fn:concat(fn:concat(fn:concat(xs:string((xs:double(fn:substring($var9_resultof_cast, xs:double(xs:decimal('1')), xs:double(xs:decimal('3')))) + xs:double('1700'))), '-'), fn:substring($var9_resultof_cast, $var3_resultof_cast, $var2_resultof_cast)), '-'), fn:substring($var9_resultof_cast, $var4_resultof_cast, $var2_resultof_cast))"/>
								</fhir:birthDate>
								<fhir:address>
									<fhir:line>
										<xsl:for-each select="$var6_address">
											<xsl:attribute name="value" namespace="" select="fn:string(@streetLine1)"/>
										</xsl:for-each>
									</fhir:line>
									<fhir:city>
										<xsl:for-each select="$var6_address">
											<xsl:attribute name="value" namespace="" select="fn:string(@city)"/>
										</xsl:for-each>
									</fhir:city>
									<fhir:state>
										<xsl:for-each select="$var6_address">
											<xsl:attribute name="value" namespace="" select="fn:string(@stateProvince)"/>
										</xsl:for-each>
									</fhir:state>
									<fhir:zip>
										<xsl:for-each select="$var6_address[fn:exists(@postalCode)]">
											<xsl:attribute name="value" namespace="" select="fn:string(@postalCode)"/>
										</xsl:for-each>
									</fhir:zip>
								</fhir:address>
							</fhir:details>
							<fhir:contact>
								<fhir:details>
									<fhir:name>
										<fhir:text>
											<xsl:for-each select="$var5_resultof_first/ns0:supports">
												<xsl:attribute name="value" namespace="" select="fn:string(ns0:support/@name)"/>
											</xsl:for-each>
										</fhir:text>
									</fhir:name>
								</fhir:details>
							</fhir:contact>
						</fhir:Patient>
					</content>
				</entry>
			</xsl:for-each>
			<xsl:for-each select="fn:doc($fhir-atom3)/ns1:feed/ns1:entry">
				<entry>
					<xsl:sequence select="(./@node(), ./node())"/>
				</entry>
			</xsl:for-each>
		</feed>
	</xsl:template>
</xsl:stylesheet>
